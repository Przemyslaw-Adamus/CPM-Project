using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CPM
{
    public class Solver
    {
        public Graph Graph { get; private set; }

        private double[] NormalNistributionTab = new double[501] { 0.5, 0.503989356, 0.507978314, 0.511966473, 0.515953437, 0.519938806, 0.523922183, 0.52790317, 0.531881372, 0.535856393, 0.539827837, 0.543795313, 0.547758426, 0.551716787, 0.555670005, 0.559617692, 0.563559463, 0.567494932, 0.571423716, 0.575345435, 0.579259709, 0.583166163, 0.587064423, 0.590954115, 0.594834872, 0.598706326, 0.602568113, 0.606419873, 0.610261248, 0.614091881, 0.617911422, 0.621719522, 0.625515835, 0.629300019, 0.633071736, 0.636830651, 0.640576433, 0.644308755, 0.648027292, 0.651731727, 0.655421742, 0.659097026, 0.662757273, 0.666402179, 0.670031446, 0.67364478, 0.67724189, 0.680822491, 0.684386303, 0.687933051, 0.691462461, 0.694974269, 0.698468212, 0.701944035, 0.705401484, 0.708840313, 0.712260281, 0.715661151, 0.719042691, 0.722404675, 0.725746882, 0.729069096, 0.732371107, 0.735652708, 0.7389137, 0.742153889, 0.745373085, 0.748571105, 0.75174777, 0.754902906, 0.758036348, 0.761147932, 0.764237502, 0.767304908, 0.770350003, 0.773372648, 0.776372708, 0.779350054, 0.782304562, 0.785236116, 0.788144601, 0.791029912, 0.793891946, 0.796730608, 0.799545807, 0.802337457, 0.805105479, 0.807849798, 0.810570345, 0.813267057, 0.815939875, 0.818588745, 0.82121362, 0.823814458, 0.82639122, 0.828943874, 0.831472393, 0.833976754, 0.836456941, 0.83891294, 0.841344746, 0.843752355, 0.84613577, 0.848494997, 0.85083005, 0.853140944, 0.8554277, 0.857690346, 0.85992891, 0.862143428, 0.864333939, 0.866500487, 0.868643119, 0.870761888, 0.872856849, 0.874928064, 0.876975597, 0.878999516, 0.880999893, 0.882976804, 0.88493033, 0.886860554, 0.888767563, 0.890651448, 0.892512303, 0.894350226, 0.896165319, 0.897957685, 0.899727432, 0.901474671, 0.903199515, 0.904902082, 0.906582491, 0.908240864, 0.909877328, 0.911492009, 0.913085038, 0.914656549, 0.916206678, 0.917735561, 0.919243341, 0.920730159, 0.922196159, 0.92364149, 0.9250663, 0.92647074, 0.927854963, 0.929219123, 0.930563377, 0.931887882, 0.933192799, 0.934478288, 0.935744512, 0.936991636, 0.938219823, 0.939429242, 0.940620059, 0.941792444, 0.942946567, 0.944082597, 0.945200708, 0.946301072, 0.947383862, 0.948449252, 0.949497417, 0.950528532, 0.951542774, 0.952540318, 0.953521342, 0.954486023, 0.955434537, 0.956367063, 0.957283779, 0.958184862, 0.959070491, 0.959940843, 0.960796097, 0.96163643, 0.96246202, 0.963273044, 0.964069681, 0.964852106, 0.965620498, 0.966375031, 0.967115881, 0.967843225, 0.968557237, 0.969258091, 0.969945961, 0.97062102, 0.97128344, 0.971933393, 0.97257105, 0.973196581, 0.973810155, 0.97441194, 0.975002105, 0.975580815, 0.976148236, 0.976704532, 0.977249868, 0.977784406, 0.978308306, 0.97882173, 0.979324837, 0.979817785, 0.98030073, 0.980773828, 0.981237234, 0.9816911, 0.982135579, 0.982570822, 0.982996977, 0.983414193, 0.983822617, 0.984222393, 0.984613665, 0.984996577, 0.985371269, 0.985737882, 0.986096552, 0.986447419, 0.986790616, 0.987126279, 0.987454539, 0.987775527, 0.988089375, 0.988396208, 0.988696156, 0.988989342, 0.98927589, 0.989555923, 0.989829561, 0.990096924, 0.99035813, 0.990613294, 0.990862532, 0.991105957, 0.991343681, 0.991575814, 0.991802464, 0.99202374, 0.992239746, 0.992450589, 0.992656369, 0.992857189, 0.993053149, 0.993244347, 0.993430881, 0.993612845, 0.993790335, 0.993963442, 0.994132258, 0.994296874, 0.994457377, 0.994613854, 0.994766392, 0.994915074, 0.995059984, 0.995201203, 0.995338812, 0.995472889, 0.995603512, 0.995730757, 0.995854699, 0.995975411, 0.996092967, 0.996207438, 0.996318892, 0.996427399, 0.996533026, 0.99663584, 0.996735904, 0.996833284, 0.996928041, 0.997020237, 0.997109932, 0.997197185, 0.997282055, 0.997364598, 0.99744487, 0.997522925, 0.997598818, 0.9976726, 0.997744323, 0.997814039, 0.997881795, 0.997947641, 0.998011624, 0.998073791, 0.998134187, 0.998192856, 0.998249843, 0.99830519, 0.998358939, 0.99841113, 0.998461805, 0.998511001, 0.998558758, 0.998605113, 0.998650102, 0.998693762, 0.998736127, 0.998777231, 0.998817109, 0.998855793, 0.998893315, 0.998929706, 0.998964997, 0.998999218, 0.999032397, 0.999064563, 0.999095745, 0.999125968, 0.999155261, 0.999183648, 0.999211154, 0.999237805, 0.999263625, 0.999288636, 0.999312862, 0.999336325, 0.999359047, 0.999381049, 0.999402352, 0.999422975, 0.999442939, 0.999462263, 0.999480965, 0.999499063, 0.999516576, 0.99953352, 0.999549913, 0.99956577, 0.999581108, 0.999595942, 0.999610288, 0.999624159, 0.999637571, 0.999650537, 0.999663071, 0.999675186, 0.999686894, 0.999698209, 0.999709143, 0.999719707, 0.999729912, 0.999739771, 0.999749293, 0.99975849, 0.999767371, 0.999775947, 0.999784227, 0.99979222, 0.999799936, 0.999807384, 0.999814573, 0.999821509, 0.999828203, 0.999834661, 0.999840891, 0.999846901, 0.999852698, 0.999858289, 0.999863681, 0.99986888, 0.999873892, 0.999878725, 0.999883383, 0.999887873, 0.9998922, 0.99989637, 0.999900389, 0.99990426, 0.99990799, 0.999911583, 0.999915043, 0.999918376, 0.999921586, 0.999924676, 0.999927652, 0.999930517, 0.999933274, 0.999935928, 0.999938483, 0.999940941, 0.999943306, 0.999945582, 0.999947772, 0.999949878, 0.999951904, 0.999953852, 0.999955726, 0.999957527, 0.999959259, 0.999960924, 0.999962525, 0.999964064, 0.999965542, 0.999966963, 0.999968329, 0.999969641, 0.999970901, 0.999972112, 0.999973274, 0.999974391, 0.999975464, 0.999976493, 0.999977482, 0.999978431, 0.999979342, 0.999980217, 0.999981056, 0.999981862, 0.999982635, 0.999983376, 0.999984088, 0.99998477, 0.999985425, 0.999986052, 0.999986654, 0.999987231, 0.999987785, 0.999988315, 0.999988824, 0.999989311, 0.999989779, 0.999990226, 0.999990655, 0.999991066, 0.99999146, 0.999991837, 0.999992199, 0.999992545, 0.999992876, 0.999993193, 0.999993497, 0.999993788, 0.999994066, 0.999994332, 0.999994587, 0.999994831, 0.999995065, 0.999995288, 0.999995502, 0.999995706, 0.999995902, 0.999996089, 0.999996268, 0.999996439, 0.999996602, 0.999996759, 0.999996908, 0.999997051, 0.999997187, 0.999997318, 0.999997442, 0.999997561, 0.999997675, 0.999997784, 0.999997888, 0.999997987, 0.999998081, 0.999998172, 0.999998258, 0.99999834, 0.999998419, 0.999998494, 0.999998566, 0.999998634, 0.999998699, 0.999998761, 0.999998821, 0.999998877, 0.999998931, 0.999998983, 0.999999032, 0.999999079, 0.999999124, 0.999999166, 0.999999207, 0.999999245, 0.999999282, 0.999999317, 0.999999351, 0.999999383, 0.999999413, 0.999999442, 0.99999947, 0.999999496, 0.999999521, 0.999999545, 0.999999567, 0.999999589, 0.999999609, 0.999999629, 0.999999648, 0.999999665, 0.999999682, 0.999999698, 0.999999713 };

        const double EPSILON = 0.000001;

        public Dictionary<double, double> NormalNistribution = new Dictionary<double, double>();

        public Solver()
        {
            Graph = new Graph();
        }

        public void LoadGraph(Graph graph)
        {
            Graph = graph;
        }

        public void CalculateGraphValues()
        {
            foreach(var incident in Graph.Incidents)
            {
                incident.CalculateEarliestPossibleOccurence();
            }
            foreach(var incident in Graph.Incidents.Reverse())
            {
                incident.CalculateLatestPossibleOccurence();
            }
            foreach(var incident in Graph.Incidents.Reverse())
            {
                incident.CalculateReserve();
            }
        }

        public IList<Incident> FindIncidentsCriticalPath()
        {
            bool nextIncidentIsAvaliable = true;
            var criticalPath = new List<Incident>
            {
                Graph.Incidents.ToList().First()
            };
            while (nextIncidentIsAvaliable)
            {
                var outgoings = criticalPath.Last().Outgoing;
                var incidentsWithoutReserve = outgoings.Select(a => a.Children).Where(i => Math.Abs(i.Reserve) < EPSILON);
                Incident nextIncident = incidentsWithoutReserve.First();
                foreach(var incident in incidentsWithoutReserve)
                {
                    if (incident.EarliestPossibleOccurrence < nextIncident.EarliestPossibleOccurrence)
                        nextIncident = incident;
                }
                criticalPath.Add(nextIncident);
                nextIncidentIsAvaliable = criticalPath.Last().Outgoing.Any();
            }
            return criticalPath;
        }

        public void ShowCriticalPath(IList<Incident> criticalPath)
        {
            var sb = new StringBuilder();
            foreach (var incident in criticalPath)
            {
                if (incident.IsNotLast())
                    sb.Append($"{incident.ID} - ");
                else
                    sb.Append($"{incident.ID}");
            }
            Console.WriteLine(sb);
        }

        public double CalculatePERT(double directiveTime)
        {
            double variance = 0;
            foreach (var acticity in Graph.Activities)
            {
                variance += acticity.Variance;
            }
            double x = (directiveTime - Graph.Incidents[Graph.Incidents.Count - 1].EarliestPossibleOccurrence) / Math.Sqrt(variance);
            double funcion = 1 / Math.Sqrt(2 * Math.PI) * Math.Pow(Math.E, Math.Pow(x, 2) / 2);
            int probability = System.Convert.ToInt32(System.Math.Floor(100.0 * funcion));
            if (probability >= 0)
            {
                return NormalNistributionTab[probability]*100;

            }
            else
            {
                return (-100)*NormalNistributionTab[probability];
            }
        }

    }
}
